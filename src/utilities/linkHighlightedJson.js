import _ from 'lodash';
import {xdrViewer, singleAccount} from './linkBuilder';

// Map of functions specific to JSON property keys that creates urls for a given
// value.
// A function can also return undefined if it doesn't deem the value worthy of
// linking (for example: invalid account ID or keys that have ambiguous names)
let accountIdGenerator = (value) => {
  if (value.length === 56) {
    return singleAccount(value);
  }
};
let valueUrlGenerator = {
  'envelope_xdr': (value) => {
    return xdrViewer(value, 'TransactionEnvelope');
  },
  'result_xdr': (value) => {
    return xdrViewer(value, 'TransactionResult');
  },
  'result_meta_xdr': (value) => {
    return xdrViewer(value, 'TransactionMeta');
  },
  'id': accountIdGenerator,
  'public_key': accountIdGenerator,
  'account_id': accountIdGenerator,
  'funder': accountIdGenerator,
  'account': accountIdGenerator,
  'source_account': accountIdGenerator,
};

// linkHighlightedJson annotates and adds relevant links to json code highlighted
// by prism.js.

// @param {string} code - Valid html generated by prism.js in JSON language mode
export default function linkHighlightedJson(code) {
  let parser = new DOMParser();
  let document = parser.parseFromString(code, 'text/html');
  let body = document.childNodes[0].childNodes[1];

  // Edit the token elements in place
  _.each(body.children, (token, index) => {
    if (token.className.indexOf('property') > 0) {
      annotatePropertyToken(token);
    }
  });
  return body.innerHTML;
}

// Takes in a property highlighted item. If functionality is defined for it's
// corresponding property (only string type supported) and the content is valid,
// then we will turn the value node into a link.
// @param {HTMLElement} propertyToken - The token element of property type (assigned by prism)
function annotatePropertyToken(propertyToken) {
  let valueToken = propertyToken.nextElementSibling.nextElementSibling;
  if (valueToken.className.indexOf('string') === -1) {
    return;
  }
  let urlGenerator = valueUrlGenerator[unQuote(propertyToken.innerHTML)];
  if (typeof urlGenerator === 'undefined') {
    return;
  }

  let href = urlGenerator(unQuote(valueToken.innerHTML));
  if (typeof href === 'undefined') {
    return;
  }
  nodeToAnchor(valueToken, href);
}

// Converts a span into an anchor. Only preserves className
// @param {HTMLElement} node - Item to be converted to an anchor
// @param {string} href - Url to link to
function nodeToAnchor(node, href) {
  node.outerHTML = `<a href="${href}" class="${node.className}">${node.innerHTML}</a>`;
}

function unQuote(input) {
  return input.substring(1, input.length - 1);
}
