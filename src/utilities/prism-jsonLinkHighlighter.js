// This is a module that creates hyperlinks in a JSON highlighted document
// generated by prism. It is not directly a prism plugin but rather a function
// that works with the HTML string generated by the prism highlighter.

// The specific rules on how to highlight is in ./linkHighlighterRules.js

import _ from 'lodash';
import linkHighlighterRules from './linkHighlighterRules';

// @param {string} code - Valid html generated by prism.js in JSON language mode
// @returns {string} code - Valid html string but with some spans converted to anchors
export default function jsonLinkHighlighter(code) {
  let parser = new DOMParser();
  let document = parser.parseFromString(code, 'text/html');
  let body = document.childNodes[0].childNodes[1];

  // Edit the token elements in place
  _.each(body.children, (token, index) => {
    if (token.className.indexOf('property') > 0) {
      annotatePropertyToken(token);
    }
  });
  return body.innerHTML;
}

// Takes in a property highlighted item. If functionality is defined for it's
// corresponding property (only string type supported) and the content is valid,
// then we will turn the value node into a link.
// @param {HTMLElement} propertyToken - The token element of property type (assigned by prism)
function annotatePropertyToken(propertyToken) {
  let valueToken = propertyToken.nextElementSibling.nextElementSibling;
  if (valueToken.className.indexOf('string') === -1) {
    return;
  }
  let urlGenerator = linkHighlighterRules[unQuote(propertyToken.innerHTML)];
  if (typeof urlGenerator === 'undefined') {
    return;
  }

  let href = urlGenerator(unQuote(valueToken.innerHTML));
  if (typeof href === 'undefined') {
    return;
  }
  nodeToAnchor(valueToken, href);
}

// Converts a span into an anchor. Only preserves className
// @param {HTMLElement} node - Item to be converted to an anchor
// @param {string} href - Url to link to
function nodeToAnchor(node, href) {
  node.outerHTML = `<a href="${href}" class="${node.className}">${node.innerHTML}</a>`;
}

function unQuote(input) {
  return input.substring(1, input.length - 1);
}
